// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Attestation.pb.h"
// @@protoc_insertion_point(imports)

@implementation AttestationRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [AttestationRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface Attestation ()
@property (strong) DataContainer* datacontainer;
@property (strong) NSString* droidGuard;
@end

@implementation Attestation

- (BOOL) hasDatacontainer {
  return !!hasDatacontainer_;
}
- (void) setHasDatacontainer:(BOOL) _value_ {
  hasDatacontainer_ = !!_value_;
}
@synthesize datacontainer;
- (BOOL) hasDroidGuard {
  return !!hasDroidGuard_;
}
- (void) setHasDroidGuard:(BOOL) _value_ {
  hasDroidGuard_ = !!_value_;
}
@synthesize droidGuard;
- (instancetype) init {
  if ((self = [super init])) {
    self.datacontainer = [DataContainer defaultInstance];
    self.droidGuard = @"";
  }
  return self;
}
static Attestation* defaultAttestationInstance = nil;
+ (void) initialize {
  if (self == [Attestation class]) {
    defaultAttestationInstance = [[Attestation alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultAttestationInstance;
}
- (instancetype) defaultInstance {
  return defaultAttestationInstance;
}
- (BOOL) isInitialized {
  if (!self.hasDatacontainer) {
    return NO;
  }
  if (!self.hasDroidGuard) {
    return NO;
  }
  if (!self.datacontainer.isInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasDatacontainer) {
    [output writeMessage:1 value:self.datacontainer];
  }
  if (self.hasDroidGuard) {
    [output writeString:2 value:self.droidGuard];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasDatacontainer) {
    size_ += computeMessageSize(1, self.datacontainer);
  }
  if (self.hasDroidGuard) {
    size_ += computeStringSize(2, self.droidGuard);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Attestation*) parseFromData:(NSData*) data {
  return (Attestation*)[[[Attestation builder] mergeFromData:data] build];
}
+ (Attestation*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Attestation*)[[[Attestation builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Attestation*) parseFromInputStream:(NSInputStream*) input {
  return (Attestation*)[[[Attestation builder] mergeFromInputStream:input] build];
}
+ (Attestation*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Attestation*)[[[Attestation builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Attestation*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Attestation*)[[[Attestation builder] mergeFromCodedInputStream:input] build];
}
+ (Attestation*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Attestation*)[[[Attestation builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AttestationBuilder*) builder {
  return [[AttestationBuilder alloc] init];
}
+ (AttestationBuilder*) builderWithPrototype:(Attestation*) prototype {
  return [[Attestation builder] mergeFrom:prototype];
}
- (AttestationBuilder*) builder {
  return [Attestation builder];
}
- (AttestationBuilder*) toBuilder {
  return [Attestation builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasDatacontainer) {
    [output appendFormat:@"%@%@ {\n", indent, @"datacontainer"];
    [self.datacontainer writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasDroidGuard) {
    [output appendFormat:@"%@%@: %@\n", indent, @"droidGuard", self.droidGuard];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasDatacontainer) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.datacontainer storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"datacontainer"];
  }
  if (self.hasDroidGuard) {
    [dictionary setObject: self.droidGuard forKey: @"droidGuard"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Attestation class]]) {
    return NO;
  }
  Attestation *otherMessage = other;
  return
      self.hasDatacontainer == otherMessage.hasDatacontainer &&
      (!self.hasDatacontainer || [self.datacontainer isEqual:otherMessage.datacontainer]) &&
      self.hasDroidGuard == otherMessage.hasDroidGuard &&
      (!self.hasDroidGuard || [self.droidGuard isEqual:otherMessage.droidGuard]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasDatacontainer) {
    hashCode = hashCode * 31 + [self.datacontainer hash];
  }
  if (self.hasDroidGuard) {
    hashCode = hashCode * 31 + [self.droidGuard hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface AttestationBuilder()
@property (strong) Attestation* resultAttestation;
@end

@implementation AttestationBuilder
@synthesize resultAttestation;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultAttestation = [[Attestation alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultAttestation;
}
- (AttestationBuilder*) clear {
  self.resultAttestation = [[Attestation alloc] init];
  return self;
}
- (AttestationBuilder*) clone {
  return [Attestation builderWithPrototype:resultAttestation];
}
- (Attestation*) defaultInstance {
  return [Attestation defaultInstance];
}
- (Attestation*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Attestation*) buildPartial {
  Attestation* returnMe = resultAttestation;
  self.resultAttestation = nil;
  return returnMe;
}
- (AttestationBuilder*) mergeFrom:(Attestation*) other {
  if (other == [Attestation defaultInstance]) {
    return self;
  }
  if (other.hasDatacontainer) {
    [self mergeDatacontainer:other.datacontainer];
  }
  if (other.hasDroidGuard) {
    [self setDroidGuard:other.droidGuard];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AttestationBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AttestationBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        DataContainerBuilder* subBuilder = [DataContainer builder];
        if (self.hasDatacontainer) {
          [subBuilder mergeFrom:self.datacontainer];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDatacontainer:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        [self setDroidGuard:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasDatacontainer {
  return resultAttestation.hasDatacontainer;
}
- (DataContainer*) datacontainer {
  return resultAttestation.datacontainer;
}
- (AttestationBuilder*) setDatacontainer:(DataContainer*) value {
  resultAttestation.hasDatacontainer = YES;
  resultAttestation.datacontainer = value;
  return self;
}
- (AttestationBuilder*) setDatacontainerBuilder:(DataContainerBuilder*) builderForValue {
  return [self setDatacontainer:[builderForValue build]];
}
- (AttestationBuilder*) mergeDatacontainer:(DataContainer*) value {
  if (resultAttestation.hasDatacontainer &&
      resultAttestation.datacontainer != [DataContainer defaultInstance]) {
    resultAttestation.datacontainer =
      [[[DataContainer builderWithPrototype:resultAttestation.datacontainer] mergeFrom:value] buildPartial];
  } else {
    resultAttestation.datacontainer = value;
  }
  resultAttestation.hasDatacontainer = YES;
  return self;
}
- (AttestationBuilder*) clearDatacontainer {
  resultAttestation.hasDatacontainer = NO;
  resultAttestation.datacontainer = [DataContainer defaultInstance];
  return self;
}
- (BOOL) hasDroidGuard {
  return resultAttestation.hasDroidGuard;
}
- (NSString*) droidGuard {
  return resultAttestation.droidGuard;
}
- (AttestationBuilder*) setDroidGuard:(NSString*) value {
  resultAttestation.hasDroidGuard = YES;
  resultAttestation.droidGuard = value;
  return self;
}
- (AttestationBuilder*) clearDroidGuard {
  resultAttestation.hasDroidGuard = NO;
  resultAttestation.droidGuard = @"";
  return self;
}
@end

@interface DataContainer ()
@property (strong) NSData* nonce;
@property (strong) NSString* apkPackageName;
@property (strong) NSData* apkCertificateDigestSha256;
@property (strong) NSData* apkDigestSha256;
@property SInt32 gmsVersion;
@property (strong) SuExec* suexec;
@property (strong) UnknownData* unknowndata;
@property SInt64 timestamp;
@end

@implementation DataContainer

- (BOOL) hasNonce {
  return !!hasNonce_;
}
- (void) setHasNonce:(BOOL) _value_ {
  hasNonce_ = !!_value_;
}
@synthesize nonce;
- (BOOL) hasApkPackageName {
  return !!hasApkPackageName_;
}
- (void) setHasApkPackageName:(BOOL) _value_ {
  hasApkPackageName_ = !!_value_;
}
@synthesize apkPackageName;
- (BOOL) hasApkCertificateDigestSha256 {
  return !!hasApkCertificateDigestSha256_;
}
- (void) setHasApkCertificateDigestSha256:(BOOL) _value_ {
  hasApkCertificateDigestSha256_ = !!_value_;
}
@synthesize apkCertificateDigestSha256;
- (BOOL) hasApkDigestSha256 {
  return !!hasApkDigestSha256_;
}
- (void) setHasApkDigestSha256:(BOOL) _value_ {
  hasApkDigestSha256_ = !!_value_;
}
@synthesize apkDigestSha256;
- (BOOL) hasGmsVersion {
  return !!hasGmsVersion_;
}
- (void) setHasGmsVersion:(BOOL) _value_ {
  hasGmsVersion_ = !!_value_;
}
@synthesize gmsVersion;
- (BOOL) hasSuexec {
  return !!hasSuexec_;
}
- (void) setHasSuexec:(BOOL) _value_ {
  hasSuexec_ = !!_value_;
}
@synthesize suexec;
- (BOOL) hasUnknowndata {
  return !!hasUnknowndata_;
}
- (void) setHasUnknowndata:(BOOL) _value_ {
  hasUnknowndata_ = !!_value_;
}
@synthesize unknowndata;
- (BOOL) hasTimestamp {
  return !!hasTimestamp_;
}
- (void) setHasTimestamp:(BOOL) _value_ {
  hasTimestamp_ = !!_value_;
}
@synthesize timestamp;
- (instancetype) init {
  if ((self = [super init])) {
    self.nonce = [NSData data];
    self.apkPackageName = @"";
    self.apkCertificateDigestSha256 = [NSData data];
    self.apkDigestSha256 = [NSData data];
    self.gmsVersion = 0;
    self.suexec = [SuExec defaultInstance];
    self.unknowndata = [UnknownData defaultInstance];
    self.timestamp = 0L;
  }
  return self;
}
static DataContainer* defaultDataContainerInstance = nil;
+ (void) initialize {
  if (self == [DataContainer class]) {
    defaultDataContainerInstance = [[DataContainer alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultDataContainerInstance;
}
- (instancetype) defaultInstance {
  return defaultDataContainerInstance;
}
- (BOOL) isInitialized {
  if (!self.hasNonce) {
    return NO;
  }
  if (!self.hasApkPackageName) {
    return NO;
  }
  if (!self.hasApkCertificateDigestSha256) {
    return NO;
  }
  if (!self.hasApkDigestSha256) {
    return NO;
  }
  if (!self.hasGmsVersion) {
    return NO;
  }
  if (!self.hasUnknowndata) {
    return NO;
  }
  if (!self.hasTimestamp) {
    return NO;
  }
  if (self.hasSuexec) {
    if (!self.suexec.isInitialized) {
      return NO;
    }
  }
  if (!self.unknowndata.isInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasNonce) {
    [output writeData:1 value:self.nonce];
  }
  if (self.hasApkPackageName) {
    [output writeString:2 value:self.apkPackageName];
  }
  if (self.hasApkCertificateDigestSha256) {
    [output writeData:3 value:self.apkCertificateDigestSha256];
  }
  if (self.hasApkDigestSha256) {
    [output writeData:4 value:self.apkDigestSha256];
  }
  if (self.hasGmsVersion) {
    [output writeInt32:5 value:self.gmsVersion];
  }
  if (self.hasSuexec) {
    [output writeMessage:6 value:self.suexec];
  }
  if (self.hasUnknowndata) {
    [output writeMessage:7 value:self.unknowndata];
  }
  if (self.hasTimestamp) {
    [output writeInt64:8 value:self.timestamp];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasNonce) {
    size_ += computeDataSize(1, self.nonce);
  }
  if (self.hasApkPackageName) {
    size_ += computeStringSize(2, self.apkPackageName);
  }
  if (self.hasApkCertificateDigestSha256) {
    size_ += computeDataSize(3, self.apkCertificateDigestSha256);
  }
  if (self.hasApkDigestSha256) {
    size_ += computeDataSize(4, self.apkDigestSha256);
  }
  if (self.hasGmsVersion) {
    size_ += computeInt32Size(5, self.gmsVersion);
  }
  if (self.hasSuexec) {
    size_ += computeMessageSize(6, self.suexec);
  }
  if (self.hasUnknowndata) {
    size_ += computeMessageSize(7, self.unknowndata);
  }
  if (self.hasTimestamp) {
    size_ += computeInt64Size(8, self.timestamp);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (DataContainer*) parseFromData:(NSData*) data {
  return (DataContainer*)[[[DataContainer builder] mergeFromData:data] build];
}
+ (DataContainer*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DataContainer*)[[[DataContainer builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (DataContainer*) parseFromInputStream:(NSInputStream*) input {
  return (DataContainer*)[[[DataContainer builder] mergeFromInputStream:input] build];
}
+ (DataContainer*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DataContainer*)[[[DataContainer builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DataContainer*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (DataContainer*)[[[DataContainer builder] mergeFromCodedInputStream:input] build];
}
+ (DataContainer*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DataContainer*)[[[DataContainer builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DataContainerBuilder*) builder {
  return [[DataContainerBuilder alloc] init];
}
+ (DataContainerBuilder*) builderWithPrototype:(DataContainer*) prototype {
  return [[DataContainer builder] mergeFrom:prototype];
}
- (DataContainerBuilder*) builder {
  return [DataContainer builder];
}
- (DataContainerBuilder*) toBuilder {
  return [DataContainer builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasNonce) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nonce", self.nonce];
  }
  if (self.hasApkPackageName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"apkPackageName", self.apkPackageName];
  }
  if (self.hasApkCertificateDigestSha256) {
    [output appendFormat:@"%@%@: %@\n", indent, @"apkCertificateDigestSha256", self.apkCertificateDigestSha256];
  }
  if (self.hasApkDigestSha256) {
    [output appendFormat:@"%@%@: %@\n", indent, @"apkDigestSha256", self.apkDigestSha256];
  }
  if (self.hasGmsVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gmsVersion", [NSNumber numberWithInteger:self.gmsVersion]];
  }
  if (self.hasSuexec) {
    [output appendFormat:@"%@%@ {\n", indent, @"suexec"];
    [self.suexec writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUnknowndata) {
    [output appendFormat:@"%@%@ {\n", indent, @"unknowndata"];
    [self.unknowndata writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasTimestamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timestamp", [NSNumber numberWithLongLong:self.timestamp]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasNonce) {
    [dictionary setObject: self.nonce forKey: @"nonce"];
  }
  if (self.hasApkPackageName) {
    [dictionary setObject: self.apkPackageName forKey: @"apkPackageName"];
  }
  if (self.hasApkCertificateDigestSha256) {
    [dictionary setObject: self.apkCertificateDigestSha256 forKey: @"apkCertificateDigestSha256"];
  }
  if (self.hasApkDigestSha256) {
    [dictionary setObject: self.apkDigestSha256 forKey: @"apkDigestSha256"];
  }
  if (self.hasGmsVersion) {
    [dictionary setObject: [NSNumber numberWithInteger:self.gmsVersion] forKey: @"gmsVersion"];
  }
  if (self.hasSuexec) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.suexec storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"suexec"];
  }
  if (self.hasUnknowndata) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.unknowndata storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"unknowndata"];
  }
  if (self.hasTimestamp) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.timestamp] forKey: @"timestamp"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[DataContainer class]]) {
    return NO;
  }
  DataContainer *otherMessage = other;
  return
      self.hasNonce == otherMessage.hasNonce &&
      (!self.hasNonce || [self.nonce isEqual:otherMessage.nonce]) &&
      self.hasApkPackageName == otherMessage.hasApkPackageName &&
      (!self.hasApkPackageName || [self.apkPackageName isEqual:otherMessage.apkPackageName]) &&
      self.hasApkCertificateDigestSha256 == otherMessage.hasApkCertificateDigestSha256 &&
      (!self.hasApkCertificateDigestSha256 || [self.apkCertificateDigestSha256 isEqual:otherMessage.apkCertificateDigestSha256]) &&
      self.hasApkDigestSha256 == otherMessage.hasApkDigestSha256 &&
      (!self.hasApkDigestSha256 || [self.apkDigestSha256 isEqual:otherMessage.apkDigestSha256]) &&
      self.hasGmsVersion == otherMessage.hasGmsVersion &&
      (!self.hasGmsVersion || self.gmsVersion == otherMessage.gmsVersion) &&
      self.hasSuexec == otherMessage.hasSuexec &&
      (!self.hasSuexec || [self.suexec isEqual:otherMessage.suexec]) &&
      self.hasUnknowndata == otherMessage.hasUnknowndata &&
      (!self.hasUnknowndata || [self.unknowndata isEqual:otherMessage.unknowndata]) &&
      self.hasTimestamp == otherMessage.hasTimestamp &&
      (!self.hasTimestamp || self.timestamp == otherMessage.timestamp) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasNonce) {
    hashCode = hashCode * 31 + [self.nonce hash];
  }
  if (self.hasApkPackageName) {
    hashCode = hashCode * 31 + [self.apkPackageName hash];
  }
  if (self.hasApkCertificateDigestSha256) {
    hashCode = hashCode * 31 + [self.apkCertificateDigestSha256 hash];
  }
  if (self.hasApkDigestSha256) {
    hashCode = hashCode * 31 + [self.apkDigestSha256 hash];
  }
  if (self.hasGmsVersion) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.gmsVersion] hash];
  }
  if (self.hasSuexec) {
    hashCode = hashCode * 31 + [self.suexec hash];
  }
  if (self.hasUnknowndata) {
    hashCode = hashCode * 31 + [self.unknowndata hash];
  }
  if (self.hasTimestamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.timestamp] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface DataContainerBuilder()
@property (strong) DataContainer* resultDataContainer;
@end

@implementation DataContainerBuilder
@synthesize resultDataContainer;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultDataContainer = [[DataContainer alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultDataContainer;
}
- (DataContainerBuilder*) clear {
  self.resultDataContainer = [[DataContainer alloc] init];
  return self;
}
- (DataContainerBuilder*) clone {
  return [DataContainer builderWithPrototype:resultDataContainer];
}
- (DataContainer*) defaultInstance {
  return [DataContainer defaultInstance];
}
- (DataContainer*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (DataContainer*) buildPartial {
  DataContainer* returnMe = resultDataContainer;
  self.resultDataContainer = nil;
  return returnMe;
}
- (DataContainerBuilder*) mergeFrom:(DataContainer*) other {
  if (other == [DataContainer defaultInstance]) {
    return self;
  }
  if (other.hasNonce) {
    [self setNonce:other.nonce];
  }
  if (other.hasApkPackageName) {
    [self setApkPackageName:other.apkPackageName];
  }
  if (other.hasApkCertificateDigestSha256) {
    [self setApkCertificateDigestSha256:other.apkCertificateDigestSha256];
  }
  if (other.hasApkDigestSha256) {
    [self setApkDigestSha256:other.apkDigestSha256];
  }
  if (other.hasGmsVersion) {
    [self setGmsVersion:other.gmsVersion];
  }
  if (other.hasSuexec) {
    [self mergeSuexec:other.suexec];
  }
  if (other.hasUnknowndata) {
    [self mergeUnknowndata:other.unknowndata];
  }
  if (other.hasTimestamp) {
    [self setTimestamp:other.timestamp];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (DataContainerBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (DataContainerBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setNonce:[input readData]];
        break;
      }
      case 18: {
        [self setApkPackageName:[input readString]];
        break;
      }
      case 26: {
        [self setApkCertificateDigestSha256:[input readData]];
        break;
      }
      case 34: {
        [self setApkDigestSha256:[input readData]];
        break;
      }
      case 40: {
        [self setGmsVersion:[input readInt32]];
        break;
      }
      case 50: {
        SuExecBuilder* subBuilder = [SuExec builder];
        if (self.hasSuexec) {
          [subBuilder mergeFrom:self.suexec];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSuexec:[subBuilder buildPartial]];
        break;
      }
      case 58: {
        UnknownDataBuilder* subBuilder = [UnknownData builder];
        if (self.hasUnknowndata) {
          [subBuilder mergeFrom:self.unknowndata];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUnknowndata:[subBuilder buildPartial]];
        break;
      }
      case 64: {
        [self setTimestamp:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasNonce {
  return resultDataContainer.hasNonce;
}
- (NSData*) nonce {
  return resultDataContainer.nonce;
}
- (DataContainerBuilder*) setNonce:(NSData*) value {
  resultDataContainer.hasNonce = YES;
  resultDataContainer.nonce = value;
  return self;
}
- (DataContainerBuilder*) clearNonce {
  resultDataContainer.hasNonce = NO;
  resultDataContainer.nonce = [NSData data];
  return self;
}
- (BOOL) hasApkPackageName {
  return resultDataContainer.hasApkPackageName;
}
- (NSString*) apkPackageName {
  return resultDataContainer.apkPackageName;
}
- (DataContainerBuilder*) setApkPackageName:(NSString*) value {
  resultDataContainer.hasApkPackageName = YES;
  resultDataContainer.apkPackageName = value;
  return self;
}
- (DataContainerBuilder*) clearApkPackageName {
  resultDataContainer.hasApkPackageName = NO;
  resultDataContainer.apkPackageName = @"";
  return self;
}
- (BOOL) hasApkCertificateDigestSha256 {
  return resultDataContainer.hasApkCertificateDigestSha256;
}
- (NSData*) apkCertificateDigestSha256 {
  return resultDataContainer.apkCertificateDigestSha256;
}
- (DataContainerBuilder*) setApkCertificateDigestSha256:(NSData*) value {
  resultDataContainer.hasApkCertificateDigestSha256 = YES;
  resultDataContainer.apkCertificateDigestSha256 = value;
  return self;
}
- (DataContainerBuilder*) clearApkCertificateDigestSha256 {
  resultDataContainer.hasApkCertificateDigestSha256 = NO;
  resultDataContainer.apkCertificateDigestSha256 = [NSData data];
  return self;
}
- (BOOL) hasApkDigestSha256 {
  return resultDataContainer.hasApkDigestSha256;
}
- (NSData*) apkDigestSha256 {
  return resultDataContainer.apkDigestSha256;
}
- (DataContainerBuilder*) setApkDigestSha256:(NSData*) value {
  resultDataContainer.hasApkDigestSha256 = YES;
  resultDataContainer.apkDigestSha256 = value;
  return self;
}
- (DataContainerBuilder*) clearApkDigestSha256 {
  resultDataContainer.hasApkDigestSha256 = NO;
  resultDataContainer.apkDigestSha256 = [NSData data];
  return self;
}
- (BOOL) hasGmsVersion {
  return resultDataContainer.hasGmsVersion;
}
- (SInt32) gmsVersion {
  return resultDataContainer.gmsVersion;
}
- (DataContainerBuilder*) setGmsVersion:(SInt32) value {
  resultDataContainer.hasGmsVersion = YES;
  resultDataContainer.gmsVersion = value;
  return self;
}
- (DataContainerBuilder*) clearGmsVersion {
  resultDataContainer.hasGmsVersion = NO;
  resultDataContainer.gmsVersion = 0;
  return self;
}
- (BOOL) hasSuexec {
  return resultDataContainer.hasSuexec;
}
- (SuExec*) suexec {
  return resultDataContainer.suexec;
}
- (DataContainerBuilder*) setSuexec:(SuExec*) value {
  resultDataContainer.hasSuexec = YES;
  resultDataContainer.suexec = value;
  return self;
}
- (DataContainerBuilder*) setSuexecBuilder:(SuExecBuilder*) builderForValue {
  return [self setSuexec:[builderForValue build]];
}
- (DataContainerBuilder*) mergeSuexec:(SuExec*) value {
  if (resultDataContainer.hasSuexec &&
      resultDataContainer.suexec != [SuExec defaultInstance]) {
    resultDataContainer.suexec =
      [[[SuExec builderWithPrototype:resultDataContainer.suexec] mergeFrom:value] buildPartial];
  } else {
    resultDataContainer.suexec = value;
  }
  resultDataContainer.hasSuexec = YES;
  return self;
}
- (DataContainerBuilder*) clearSuexec {
  resultDataContainer.hasSuexec = NO;
  resultDataContainer.suexec = [SuExec defaultInstance];
  return self;
}
- (BOOL) hasUnknowndata {
  return resultDataContainer.hasUnknowndata;
}
- (UnknownData*) unknowndata {
  return resultDataContainer.unknowndata;
}
- (DataContainerBuilder*) setUnknowndata:(UnknownData*) value {
  resultDataContainer.hasUnknowndata = YES;
  resultDataContainer.unknowndata = value;
  return self;
}
- (DataContainerBuilder*) setUnknowndataBuilder:(UnknownDataBuilder*) builderForValue {
  return [self setUnknowndata:[builderForValue build]];
}
- (DataContainerBuilder*) mergeUnknowndata:(UnknownData*) value {
  if (resultDataContainer.hasUnknowndata &&
      resultDataContainer.unknowndata != [UnknownData defaultInstance]) {
    resultDataContainer.unknowndata =
      [[[UnknownData builderWithPrototype:resultDataContainer.unknowndata] mergeFrom:value] buildPartial];
  } else {
    resultDataContainer.unknowndata = value;
  }
  resultDataContainer.hasUnknowndata = YES;
  return self;
}
- (DataContainerBuilder*) clearUnknowndata {
  resultDataContainer.hasUnknowndata = NO;
  resultDataContainer.unknowndata = [UnknownData defaultInstance];
  return self;
}
- (BOOL) hasTimestamp {
  return resultDataContainer.hasTimestamp;
}
- (SInt64) timestamp {
  return resultDataContainer.timestamp;
}
- (DataContainerBuilder*) setTimestamp:(SInt64) value {
  resultDataContainer.hasTimestamp = YES;
  resultDataContainer.timestamp = value;
  return self;
}
- (DataContainerBuilder*) clearTimestamp {
  resultDataContainer.hasTimestamp = NO;
  resultDataContainer.timestamp = 0L;
  return self;
}
@end

@interface SuExec ()
@property (strong) NSString* execPath;
@property (strong) NSData* execSignature;
@end

@implementation SuExec

- (BOOL) hasExecPath {
  return !!hasExecPath_;
}
- (void) setHasExecPath:(BOOL) _value_ {
  hasExecPath_ = !!_value_;
}
@synthesize execPath;
- (BOOL) hasExecSignature {
  return !!hasExecSignature_;
}
- (void) setHasExecSignature:(BOOL) _value_ {
  hasExecSignature_ = !!_value_;
}
@synthesize execSignature;
- (instancetype) init {
  if ((self = [super init])) {
    self.execPath = @"";
    self.execSignature = [NSData data];
  }
  return self;
}
static SuExec* defaultSuExecInstance = nil;
+ (void) initialize {
  if (self == [SuExec class]) {
    defaultSuExecInstance = [[SuExec alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultSuExecInstance;
}
- (instancetype) defaultInstance {
  return defaultSuExecInstance;
}
- (BOOL) isInitialized {
  if (!self.hasExecPath) {
    return NO;
  }
  if (!self.hasExecSignature) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasExecPath) {
    [output writeString:1 value:self.execPath];
  }
  if (self.hasExecSignature) {
    [output writeData:2 value:self.execSignature];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasExecPath) {
    size_ += computeStringSize(1, self.execPath);
  }
  if (self.hasExecSignature) {
    size_ += computeDataSize(2, self.execSignature);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (SuExec*) parseFromData:(NSData*) data {
  return (SuExec*)[[[SuExec builder] mergeFromData:data] build];
}
+ (SuExec*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SuExec*)[[[SuExec builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SuExec*) parseFromInputStream:(NSInputStream*) input {
  return (SuExec*)[[[SuExec builder] mergeFromInputStream:input] build];
}
+ (SuExec*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SuExec*)[[[SuExec builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SuExec*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SuExec*)[[[SuExec builder] mergeFromCodedInputStream:input] build];
}
+ (SuExec*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SuExec*)[[[SuExec builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SuExecBuilder*) builder {
  return [[SuExecBuilder alloc] init];
}
+ (SuExecBuilder*) builderWithPrototype:(SuExec*) prototype {
  return [[SuExec builder] mergeFrom:prototype];
}
- (SuExecBuilder*) builder {
  return [SuExec builder];
}
- (SuExecBuilder*) toBuilder {
  return [SuExec builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasExecPath) {
    [output appendFormat:@"%@%@: %@\n", indent, @"execPath", self.execPath];
  }
  if (self.hasExecSignature) {
    [output appendFormat:@"%@%@: %@\n", indent, @"execSignature", self.execSignature];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasExecPath) {
    [dictionary setObject: self.execPath forKey: @"execPath"];
  }
  if (self.hasExecSignature) {
    [dictionary setObject: self.execSignature forKey: @"execSignature"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[SuExec class]]) {
    return NO;
  }
  SuExec *otherMessage = other;
  return
      self.hasExecPath == otherMessage.hasExecPath &&
      (!self.hasExecPath || [self.execPath isEqual:otherMessage.execPath]) &&
      self.hasExecSignature == otherMessage.hasExecSignature &&
      (!self.hasExecSignature || [self.execSignature isEqual:otherMessage.execSignature]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasExecPath) {
    hashCode = hashCode * 31 + [self.execPath hash];
  }
  if (self.hasExecSignature) {
    hashCode = hashCode * 31 + [self.execSignature hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface SuExecBuilder()
@property (strong) SuExec* resultSuExec;
@end

@implementation SuExecBuilder
@synthesize resultSuExec;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSuExec = [[SuExec alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSuExec;
}
- (SuExecBuilder*) clear {
  self.resultSuExec = [[SuExec alloc] init];
  return self;
}
- (SuExecBuilder*) clone {
  return [SuExec builderWithPrototype:resultSuExec];
}
- (SuExec*) defaultInstance {
  return [SuExec defaultInstance];
}
- (SuExec*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SuExec*) buildPartial {
  SuExec* returnMe = resultSuExec;
  self.resultSuExec = nil;
  return returnMe;
}
- (SuExecBuilder*) mergeFrom:(SuExec*) other {
  if (other == [SuExec defaultInstance]) {
    return self;
  }
  if (other.hasExecPath) {
    [self setExecPath:other.execPath];
  }
  if (other.hasExecSignature) {
    [self setExecSignature:other.execSignature];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SuExecBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SuExecBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setExecPath:[input readString]];
        break;
      }
      case 18: {
        [self setExecSignature:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasExecPath {
  return resultSuExec.hasExecPath;
}
- (NSString*) execPath {
  return resultSuExec.execPath;
}
- (SuExecBuilder*) setExecPath:(NSString*) value {
  resultSuExec.hasExecPath = YES;
  resultSuExec.execPath = value;
  return self;
}
- (SuExecBuilder*) clearExecPath {
  resultSuExec.hasExecPath = NO;
  resultSuExec.execPath = @"";
  return self;
}
- (BOOL) hasExecSignature {
  return resultSuExec.hasExecSignature;
}
- (NSData*) execSignature {
  return resultSuExec.execSignature;
}
- (SuExecBuilder*) setExecSignature:(NSData*) value {
  resultSuExec.hasExecSignature = YES;
  resultSuExec.execSignature = value;
  return self;
}
- (SuExecBuilder*) clearExecSignature {
  resultSuExec.hasExecSignature = NO;
  resultSuExec.execSignature = [NSData data];
  return self;
}
@end

@interface UnknownData ()
@property BOOL unknown1;
@property BOOL unknown2;
@end

@implementation UnknownData

- (BOOL) hasUnknown1 {
  return !!hasUnknown1_;
}
- (void) setHasUnknown1:(BOOL) _value_ {
  hasUnknown1_ = !!_value_;
}
- (BOOL) unknown1 {
  return !!unknown1_;
}
- (void) setUnknown1:(BOOL) _value_ {
  unknown1_ = !!_value_;
}
- (BOOL) hasUnknown2 {
  return !!hasUnknown2_;
}
- (void) setHasUnknown2:(BOOL) _value_ {
  hasUnknown2_ = !!_value_;
}
- (BOOL) unknown2 {
  return !!unknown2_;
}
- (void) setUnknown2:(BOOL) _value_ {
  unknown2_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.unknown1 = NO;
    self.unknown2 = NO;
  }
  return self;
}
static UnknownData* defaultUnknownDataInstance = nil;
+ (void) initialize {
  if (self == [UnknownData class]) {
    defaultUnknownDataInstance = [[UnknownData alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultUnknownDataInstance;
}
- (instancetype) defaultInstance {
  return defaultUnknownDataInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUnknown1) {
    return NO;
  }
  if (!self.hasUnknown2) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUnknown1) {
    [output writeBool:1 value:self.unknown1];
  }
  if (self.hasUnknown2) {
    [output writeBool:2 value:self.unknown2];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUnknown1) {
    size_ += computeBoolSize(1, self.unknown1);
  }
  if (self.hasUnknown2) {
    size_ += computeBoolSize(2, self.unknown2);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (UnknownData*) parseFromData:(NSData*) data {
  return (UnknownData*)[[[UnknownData builder] mergeFromData:data] build];
}
+ (UnknownData*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UnknownData*)[[[UnknownData builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UnknownData*) parseFromInputStream:(NSInputStream*) input {
  return (UnknownData*)[[[UnknownData builder] mergeFromInputStream:input] build];
}
+ (UnknownData*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UnknownData*)[[[UnknownData builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UnknownData*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UnknownData*)[[[UnknownData builder] mergeFromCodedInputStream:input] build];
}
+ (UnknownData*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UnknownData*)[[[UnknownData builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UnknownDataBuilder*) builder {
  return [[UnknownDataBuilder alloc] init];
}
+ (UnknownDataBuilder*) builderWithPrototype:(UnknownData*) prototype {
  return [[UnknownData builder] mergeFrom:prototype];
}
- (UnknownDataBuilder*) builder {
  return [UnknownData builder];
}
- (UnknownDataBuilder*) toBuilder {
  return [UnknownData builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUnknown1) {
    [output appendFormat:@"%@%@: %@\n", indent, @"unknown1", [NSNumber numberWithBool:self.unknown1]];
  }
  if (self.hasUnknown2) {
    [output appendFormat:@"%@%@: %@\n", indent, @"unknown2", [NSNumber numberWithBool:self.unknown2]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUnknown1) {
    [dictionary setObject: [NSNumber numberWithBool:self.unknown1] forKey: @"unknown1"];
  }
  if (self.hasUnknown2) {
    [dictionary setObject: [NSNumber numberWithBool:self.unknown2] forKey: @"unknown2"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[UnknownData class]]) {
    return NO;
  }
  UnknownData *otherMessage = other;
  return
      self.hasUnknown1 == otherMessage.hasUnknown1 &&
      (!self.hasUnknown1 || self.unknown1 == otherMessage.unknown1) &&
      self.hasUnknown2 == otherMessage.hasUnknown2 &&
      (!self.hasUnknown2 || self.unknown2 == otherMessage.unknown2) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUnknown1) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.unknown1] hash];
  }
  if (self.hasUnknown2) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.unknown2] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface UnknownDataBuilder()
@property (strong) UnknownData* resultUnknownData;
@end

@implementation UnknownDataBuilder
@synthesize resultUnknownData;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultUnknownData = [[UnknownData alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultUnknownData;
}
- (UnknownDataBuilder*) clear {
  self.resultUnknownData = [[UnknownData alloc] init];
  return self;
}
- (UnknownDataBuilder*) clone {
  return [UnknownData builderWithPrototype:resultUnknownData];
}
- (UnknownData*) defaultInstance {
  return [UnknownData defaultInstance];
}
- (UnknownData*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UnknownData*) buildPartial {
  UnknownData* returnMe = resultUnknownData;
  self.resultUnknownData = nil;
  return returnMe;
}
- (UnknownDataBuilder*) mergeFrom:(UnknownData*) other {
  if (other == [UnknownData defaultInstance]) {
    return self;
  }
  if (other.hasUnknown1) {
    [self setUnknown1:other.unknown1];
  }
  if (other.hasUnknown2) {
    [self setUnknown2:other.unknown2];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UnknownDataBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UnknownDataBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUnknown1:[input readBool]];
        break;
      }
      case 16: {
        [self setUnknown2:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasUnknown1 {
  return resultUnknownData.hasUnknown1;
}
- (BOOL) unknown1 {
  return resultUnknownData.unknown1;
}
- (UnknownDataBuilder*) setUnknown1:(BOOL) value {
  resultUnknownData.hasUnknown1 = YES;
  resultUnknownData.unknown1 = value;
  return self;
}
- (UnknownDataBuilder*) clearUnknown1 {
  resultUnknownData.hasUnknown1 = NO;
  resultUnknownData.unknown1 = NO;
  return self;
}
- (BOOL) hasUnknown2 {
  return resultUnknownData.hasUnknown2;
}
- (BOOL) unknown2 {
  return resultUnknownData.unknown2;
}
- (UnknownDataBuilder*) setUnknown2:(BOOL) value {
  resultUnknownData.hasUnknown2 = YES;
  resultUnknownData.unknown2 = value;
  return self;
}
- (UnknownDataBuilder*) clearUnknown2 {
  resultUnknownData.hasUnknown2 = NO;
  resultUnknownData.unknown2 = NO;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
